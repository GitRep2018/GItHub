 n MysqlInstallation:
------------------
subscription-manager repos --list-enabled

yum -y install @mysql

systemctl start mysqld
systemctl enable mysqld
systemctl status mysqld
mysql_secure_installation (Y,Low,Yes,then all NO)

mysql -u root –p

Create database ingdb;

mysql> show databases;

mysql >use ingdb;

mysql> CREATE  USER 'inguser1'@'%' IDENTIFIED BY 'H@ckath0n';
Query OK, 0 rows affected (0.01 sec)      


 
mysql> GRANT ALL PRIVILEGES ON *.* to 'inguser1'@'%';
Query OK, 0 rows affected (0.00 sec)
 
mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)
 
mysql> exit
Bye


   JDK/Java Installation:
-----------------------
sudo su -


cd /opt/

download java .

tar -xzvf jdk-8u212-linux-x64.tar.gz

cd jdk1.8.0_212/

alternatives --install /usr/bin/java java /opt/jdk1.8.0_212/bin/java 2

alternatives --config java
give 1 number

alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_212/bin/jar 2
alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_212/bin/javac 2
alternatives --set jar /opt/jdk1.8.0_212/bin/jar
alternatives --set javac /opt/jdk1.8.0_212/bin/javac

sudo vi /etc/environment
export JAVA_HOME=/opt/jdk1.8.0_212
export JRE_HOME=/opt/jdk1.8.0_212/jre
export PATH=$PATH:/opt/jdk1.8.0_212/bin:/opt/jdk1.8.0_212/jre/bin

                                                  jenkins installation
                                                 ----------------------
Refer to the latest RPM (https://pkg.jenkins.io/redhat-stable/)

cd /opt

dnf install wget unzip tar make gcc openssl-devel libcurl-devel expat-devel

wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo

sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key

sudo dnf install jenkins -y

systemctl start jenkins



To get the token
cat /var/lib/jenkins/secrets/initialAdminPassword



                                      MAVEN INSTALL
                                     ---------------
sudo wget http://mirrors.estointernet.in/apache/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz
tar -xvzf apache-maven-3.6.2-bin.tar.gz
cp -r apache-maven-3.6.2 maven



vi /etc/profile
export M2_HOME=/opt/maven
export PATH=${M2_HOME}/bin:${PATH}

source /etc/profile

                                            Tomcat installation
                                           ----------------------

sudo wget http://mirrors.estointernet.in/apache/tomcat/tomcat-9/v9.0.26/bin/apache-tomcat-9.0.26.tar.gz

tar -xvzf apache-tomcat-9.0.26.tar.gz 

cd apache-tomcat-9.0.26

cd conf

cp -r server.xml server.xmlbkp

vi server.xml
<Connector port="8888" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />


cp -r tomcat-users.xml tomcat-users.xmlbkp

vi tomcat-users.xml
<user username="admin" password="admin" roles="manager-gui,admin-gui,manager-script"/>


cd ..

cd webapps

cd manager

cd META-INF

vi context.xml
<!--  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /> -->

cd ..
cd ..
cd ..
cd bin

sh shutdown.sh

sh startup.sh

 Nexus installation
                                      --------------------
Note: Install Nexus in root only.

sudo su -
cd /opt
wget http://www.sonatype.org/downloads/nexus-latest-bundle.zip
chmod 777 nexus-latest-bundle.zip
unzip nexus-latest-bundle.zip
cd nexus-2.14.14-01/bin
RUN_AS_USER=root ./nexus start

8081--default port   - publicip:8081/nexus
default credentials are:
admin
admin123

To push artifacts to nexus we need to set server property in /opt/maven/conf/settings.xml

vi /opt/maven/conf/settings.xml and add the properties under server tag.

   <server>
      <id>nexus</id>
      <username>admin</username>
      <password>admin123</password>
    </server>

                                             Sonarqube Installation 
                                           ===========================
cd /opt
sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.6.zip
sudo unzip sonarqube-7.6.zip
we need to give full permission to sonarqube.7.6. (we need to run as ec2-user)
sudo chown -R ec2-user:ec2-user /opt/sonarqube-7.6
sudo chmod 777 -R sonarqube-7.6
cd sonarqube-7.6/bin/linux-x86-64


ls
sh sonar.sh start
sh sonar.sh status

publicip:9000

UN:admin
PW:admin


NODEJS ,NPM  Installation:
=====================================================================================
yum install -y gcc-c++ make
curl -sL https://rpm.nodesource.com/setup_10.x | sudo -E bash -
yum install nodejs -y
npm install yarn -g


vi /etc/environment
export NODE_HOME=/usr/bin/node
export PATH=${NODE_HOME}/bin:${PATH}

node --version
npm --version
	
React Configuration Steps:
npm install -g  create-react-app (If we are using first time, run this command  on server) 

After Completion of all Third-party Softwares Download, Install Plugins in Jenkins
------------------------------------------------------------------------------------
Navigate to Manage Jenkins -> Manage Plugins,  Install below plugins from available plugins
1)Maven Integration
2)NodeJs

Navigate to Manage Jenkins -> Global Tool Configuration, Specify below things for jdk ,maven , 
sonar configuration and NodeJs
-----------------------------------------------------------------------------------------------

JAVA_HOME
/opt/jdk1.8.0_212

Git
/usr/bin/git

MAVEN_HOME
/opt/maven

NODEJS
/usr/bin/node


application.Properties:
------------------------
server.port=9090

server.servlet.context-path=/parking

server.servlet.application-display-name=/parking



spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL57Dialect



#spring.datasource.url=jdbc:mysql://localhost:3306/parking?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false

#spring.datasource.username=root

#spring.datasource.password=root



spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.datasource.url=jdbc:mysql://204.236.245.98:3306/ingdb?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false

spring.datasource.username= inguser1

spring.datasource.password= H@ckath0n





sonar.host.url=http://204.236.245.98:9000



#spring.mail.host = smtp.gmail.com

#spring.mail.username =kkrpcs@gmail.com

#spring.mail.password =Karthik_12raja

#Below Properties are needed for maintaining the session.\u200B

#Two Step verification should not be enabled for gmail.\u200B

#spring.mail.properties.mail.smtp.auth = true

#spring.mail.properties.mail.smtp.socketFactory.port = 465

#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory

#spring.mail.properties.mail.smtp.socketFactory.fallback = false



logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n

logging.level.root=info

logging.level.org.hibernate.SQL=debug

logging.path = /Log

logging.file= /Log/parking.log

logging.pattern.file= %d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n



#management.endpoints.web.exposure.exclude=*;

management.endpoints.beans.enabled=false

management.endpoints.web.exposure.include=*




Note:Refer Word document for better understanding on application.properties

1)Create Freestyle for frontend (UI)

https://github.com/kurukundaveera/parking_frontend.git (UI)

Go to Build > Execute shell
Add below two com
npm install
npm run build

Give Build 
then
[root@ip-172-31-44-127 opt]# cd /var/lib/jenkins/workspace/
[root@ip-172-31-44-127 workspace]# ls
 UI_Demo_Parking
[root@ip-172-31-44-127 workspace]#
[root@ip-172-31-44-127 workspace]# cd UI_Demo_Parking
[root@ip-172-31-44-127 UI_Demo_Parking]# ls
build  node_modules  package.json  package-lock.json  public  README.md  src
[root@ip-172-31-44-127 UI_Demo_Parking]#
[root@ip-172-31-44-127 UI_Demo_Parking]# cp -rf build/ /opt/apache-tomcat-9.0.26/webapps/
[root@ip-172-31-44-127 UI_Demo_Parking]# chmod -R 777 build/

Go to tomcat server 
http://204.236.245.98:8888/build/


2)Create a Maven Project for Backend (JAVA)
https://github.com/kurukundaveera/parking_backend.git  (JAVA)

Goals and options give
clean install

Give build 

then 
[root@ip-172-31-44-127 opt]# cd /var/lib/jenkins/workspace/
[root@ip-172-31-44-127 opt]# cd /var/lib/jenkins/workspace/
[root@ip-172-31-44-127 workspace]# ls
Backend_Demo_Praking  UI_Demo_Parking
[root@ip-172-31-44-127 workspace]#
[root@ip-172-31-44-127 workspace]# cd Backend_Demo_Praking
[root@ip-172-31-44-127 Backend_Demo_Praking]# ls
pom.xml  README.md  src  target
[root@ip-172-31-44-127 Backend_Demo_Praking]# cd target/
[root@ip-172-31-44-127 target]# ls
classes            generated-test-sources  maven-archiver  parking-0.0.1-SNAPSHOT.jar           site              test-classes
generated-sources  jacoco.exec             maven-status    parking-0.0.1-SNAPSHOT.jar.original  surefire-reports
[root@ip-172-31-44-127 target]# java -jar parking-0.0.1-SNAPSHOT.jar


http://204.236.245.98:9090/parking/swagger-ui.html#/login-controller
